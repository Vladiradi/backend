package task02;
//–û–¥–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è —Ä–µ—à–∏–ª–∞ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–∏–ª–ª–∏–æ–Ω. –î–ª—è —ç—Ç–æ–≥–æ –æ–Ω–∏ —Ä–µ—à–∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å—ã, –≥–¥–µ –∑–∞ 1000
//–º–æ–∂–Ω–æ –æ–±—É—á–∏—Ç—å—Å—è —á–µ–º—É-—Ç–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–º—É –∏ –ø–æ–ª–µ–∑–Ω–æ–º—É:
//–æ–Ω–∏ –Ω–∞–Ω—è–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∞—é—Ç 10% –æ—Ç —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞.
//        –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –¥–∞—Å—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–±–∏—Ä–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ –∫—É—Ä—Å –¥–æ —Ç–µ—Ö –ø–æ—Ä,
//–ø–æ–∫–∞ –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç –º–∏–ª–ª–∏–æ–Ω :) –ü–æ–¥—É–º–∞–π—Ç–µ, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å AtomicInteger –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è.
//        (–ù—É–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å —É—Å–ª–æ–≤–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä —á—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ–±—É—á–∞–µ—Ç –≥—Ä—É–ø–ø—É –∏–∑ 10 —á–µ–ª–æ–≤–µ–∫)

import java.util.concurrent.atomic.AtomicInteger;

import java.util.concurrent.atomic.AtomicInteger;

public class CourseLearn {

    private static final int COURSE_PRICE = 1000;
    private static final int PROFIT_GOAL = 1_000_000;
    private static final int STUDENTS_PER_GROUP = 10;
    private static final AtomicInteger totalCompanyProfit = new AtomicInteger(0);
    private static final AtomicInteger totalTeacherEarnings = new AtomicInteger(0);
    private static final AtomicInteger totalStudentCount = new AtomicInteger(0);

    public static void main(String[] args) {
        int numberOfThreads = 5;
        Thread[] threads = new Thread[numberOfThreads];
        for (int i = 0; i < numberOfThreads; i++) {
            threads[i] = new Thread(CourseLearn::enrollStudents);
            threads[i].start();
        }


        for (Thread thread : threads) {
            try {
                thread.join();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }


        System.out.println("\n‚úÖ The company has reached its profit goal!");
        System.out.println(" Total students enrolled: " + totalStudentCount.get());
        System.out.println("Total company profit: ‚Ç¨" + totalCompanyProfit.get());
        System.out.println("Total teacher earnings: ‚Ç¨" + totalTeacherEarnings.get());
    }

    private static void enrollStudents() {
        while (true) {
            int currentProfit = totalCompanyProfit.get();


            if (currentProfit >= PROFIT_GOAL) {
                break;
            }
            totalStudentCount.incrementAndGet();


            int teacherShare = COURSE_PRICE / 10;
            int companyShare = COURSE_PRICE - teacherShare;

            totalCompanyProfit.addAndGet(companyShare);
            totalTeacherEarnings.addAndGet(teacherShare);
            if (totalStudentCount.get() % STUDENTS_PER_GROUP == 0) {
                System.out.println("üì¢ A new group of " + STUDENTS_PER_GROUP + " students has been formed.");
            }


            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
    }
}